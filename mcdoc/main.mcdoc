/// General type information struct.
struct McTypeInfo {
    /// Name of the type.
    name: string,
    /// Size in bits of the type.
    bits: int @ 0..,
    /// Size in bytes of the type.
    bytes: int @ 0..
}

/// Struct type for integer data type constants.
type McIntegerType<T> = struct {
    ...McTypeInfo,
    /// Minimum value.
    min: T,
    /// Maximum value.
    max: T
}

/// Struct type for floating-point data type constants.
type McFloatingType<T> = struct {
    ...McTypeInfo,
    /// Minimum value.
    min: T,
    /// Maximum value.
    max: T,
    /// Smallest non-zero value.
    epsilon: T,
    /// Ratio of a circle's circumference to its diameter.
    pi: T,
    /// Ratio of a circle's circumference to its radius (`pi` * 2).
    tau: T,
    /// Golden ratio.
    phi: T,
    /// Base of the natural logarithm, and exponential function.
    euler: T
}

/// mc_std's `std:main` storage struct.
struct MainStorage {
    /// Constants of the datapack.
    consts: struct {
        /// Constants related to the `boolean` (`true` or `false`) Minecraft type.
        "boolean": struct {
            ...McTypeInfo,
            /// `true`/`1b`.
            "true": boolean,
            /// `false`/`0b`.
            "false": boolean
        },
        /// Constants related to the `byte` (8 bit signed integer) Minecraft type.
        "byte": McIntegerType<byte>,
        /// Constants related to the `short` (16 bit signed integer) Minecraft type.
        "short": McIntegerType<short>,
        /// Constants related to the `int` (32 bit signed integer) Minecraft type.
        "int": McIntegerType<int>,
        /// Constants related to the `long` (64 bit signed integer) Minecraft type.
        "long": McIntegerType<long>,
        /// Constants related to the `float` (32 bit floating-point number) Minecraft type.
        "float": McFloatingType<float>,
        /// Constants related to the `double` (64 bit floating-point number) Minecraft type.
        "double": McFloatingType<double>
    }
}

/// Docs!
dispatch minecraft:storage[std:main] to MainStorage
